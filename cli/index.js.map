{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\nimport yargs from 'yargs'\r\nimport * as glob from 'glob'\r\nimport { execSync } from \"child_process\"\r\nimport { hideBin } from 'yargs/helpers'\r\nimport { optimize } from 'svgo'\r\n/**\r\n * \r\n * import AdmZip from \"adm-zip\";\r\nimport { execSync } from \"child_process\";\r\nimport Download from \"download\";\r\nimport { ensureDir, remove } from \"fs-extra\";\r\nimport { join } from \"path\";\r\n\r\nimport { tempDownloadDir } from \"./constants\";\r\nimport { list } from \"./utils\";\r\n\r\nfunction getVersion(version: string): string {\r\n  const versions = JSON.parse(\r\n    execSync(\"npm view material-design-icons versions --json\").toString()\r\n  );\r\n */\r\nconst argv = yargs(hideBin(process.argv))\r\n    .option('out-dir', {\r\n        describe: 'Output directory for wrapped SVG files',\r\n        demandOption: true,\r\n        default: \"./svgx\",\r\n        type: 'string'\r\n    })\r\n    .option('case', {\r\n        describe: 'Change _,- to camel case',\r\n        default: true,\r\n        type: 'boolean'\r\n    })\r\n    .help()\r\n    .argv\r\n\r\nconst outputDir = argv['out-dir']\r\nconst ccase = argv['case']\r\n\r\nif (!fs.existsSync(outputDir)) {\r\n    fs.mkdirSync(outputDir, { recursive: true })\r\n    console.log(`Created output directory: ${outputDir}`)\r\n}\r\n\r\nif (!outputDir) {\r\n    console.error('Please provide the output directory using --out-dir option.')\r\n    process.exit(1)\r\n}\r\n\r\nfunction insertPropsIntoSvg(str: string): string {\r\n    const openTagIndex = str.indexOf('<svg')\r\n    const closeTagIndex = str.indexOf('>', openTagIndex)\r\n\r\n    if (openTagIndex !== -1 && closeTagIndex !== -1) {\r\n        const insertIndex = closeTagIndex\r\n        const result = str.slice(0, insertIndex) + ' {...props}' + str.slice(insertIndex)\r\n        return result\r\n    } else {\r\n        console.error('Invalid input format')\r\n        return str\r\n    }\r\n}\r\n\r\nfunction comment(svgContent: string) {\r\n    // // Use regular expressions to match and comment out specific lines\r\n    // const commentedSvgContent = svgContent.replace(\r\n    //     /\\s*<\\?xml version=\".+?\" .+?>\\s*|\\s*<!--[^>]*-->\\s*|\\s*<!DOCTYPE[^>]*>\\s*/igm,\r\n    //     (match) => '' // `/* ${match} */`\r\n    // )\r\n\r\n    // return commentedSvgContent.replace(/\\s*\\w+:\\w+=\"[^\"]*\"\\s*/igm, ' ')\r\n    return svgContent.replace(/\\s*\\w+:\\w+=\"[^\"]*\"\\s*/igm, ' ')\r\n}\r\n\r\nconst snakeToCamel = (input: string) => ccase ? (() => {\r\n    const words = input.split(/[-_]/)\r\n    const capitalizedWords = words.map((word, index) => {\r\n        if (index === 0) {\r\n            // Capitalize the first word\r\n            return word.charAt(0).toUpperCase() + word.slice(1)\r\n        } else {\r\n            // Capitalize the rest of the words\r\n            return word.charAt(0).toUpperCase() + word.slice(1)\r\n        }\r\n    })\r\n    return capitalizedWords.join('')\r\n})()\r\n    : input\r\n\r\nconst svgFilesPattern = argv._[0] || './**/*.svg'\r\nconst svgFiles = glob.sync(svgFilesPattern)\r\n\r\nconsole.log(`Looking for svg from ${svgFilesPattern}`)\r\n// console.log(`Files to process`, svgFiles)\r\n\r\nconsole.log(`Files to processed:`)\r\n\r\nsvgFiles.forEach(svgFilePath => {\r\n    try {\r\n        const svgContent = fs.readFileSync(svgFilePath, 'utf-8').trim()\r\n        const fileName = svgFilePath.replace(/^.*[\\\\/]/, '').replace('.svg', '')\r\n        const od = `${outputDir}/${path.dirname(svgFilePath)}`\r\n        if (!fs.existsSync(od))\r\n            fs.mkdirSync(od, { recursive: true })\r\n\r\n        const outputFilePath = `${od}/${snakeToCamel(fileName)}.tsx`\r\n        const wrappedSvg = `\r\nimport { type JSX } from 'woby'\r\nexport default (props: JSX.SVGAttributes<SVGElement>) => ${insertPropsIntoSvg(comment(optimize(svgContent, {\r\n            multipass: true,\r\n            js2svg: {\r\n                indent: 2, // string with spaces or number of spaces. 4 by default\r\n                pretty: true, // boolean, false by default\r\n            },\r\n        }).data))}\r\n`\r\n\r\n        fs.writeFileSync(outputFilePath, wrappedSvg)\r\n        console.log(`${svgFilePath} -> ${outputFilePath}`)\r\n    } catch (error) {\r\n        console.error(`An error occurred while processing ${svgFilePath}:`, (error as any).message)\r\n    }\r\n})\r\n"],"names":["hideBin","glob","optimize"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAuBA,MAAM,OAAO,MAAMA,gBAAQ,QAAQ,IAAI,CAAC,EACnC,OAAO,WAAW;AAAA,EACf,UAAU;AAAA,EACV,cAAc;AAAA,EACd,SAAS;AAAA,EACT,MAAM;AACV,CAAC,EACA,OAAO,QAAQ;AAAA,EACZ,UAAU;AAAA,EACV,SAAS;AAAA,EACT,MAAM;AACV,CAAC,EACA,KACA,EAAA;AAEL,MAAM,YAAY,KAAK,SAAS;AAChC,MAAM,QAAQ,KAAK,MAAM;AAEzB,IAAI,CAAC,GAAG,WAAW,SAAS,GAAG;AAC3B,KAAG,UAAU,WAAW,EAAE,WAAW,KAAM,CAAA;AACnC,UAAA,IAAI,6BAA6B,SAAS,EAAE;AACxD;AAEA,IAAI,CAAC,WAAW;AACZ,UAAQ,MAAM,6DAA6D;AAC3E,UAAQ,KAAK,CAAC;AAClB;AAEA,SAAS,mBAAmB,KAAqB;AACvC,QAAA,eAAe,IAAI,QAAQ,MAAM;AACvC,QAAM,gBAAgB,IAAI,QAAQ,KAAK,YAAY;AAE/C,MAAA,iBAAiB,MAAM,kBAAkB,IAAI;AAC7C,UAAM,cAAc;AACd,UAAA,SAAS,IAAI,MAAM,GAAG,WAAW,IAAI,gBAAgB,IAAI,MAAM,WAAW;AACzE,WAAA;AAAA,EAAA,OACJ;AACH,YAAQ,MAAM,sBAAsB;AAC7B,WAAA;AAAA,EACX;AACJ;AAEA,SAAS,QAAQ,YAAoB;AAQ1B,SAAA,WAAW,QAAQ,4BAA4B,GAAG;AAC7D;AAEA,MAAM,eAAe,CAAC,UAAkB,SAAS,MAAM;AAC7C,QAAA,QAAQ,MAAM,MAAM,MAAM;AAChC,QAAM,mBAAmB,MAAM,IAAI,CAAC,MAAM,UAAU;AAChD,QAAI,UAAU,GAAG;AAEN,aAAA,KAAK,OAAO,CAAC,EAAE,gBAAgB,KAAK,MAAM,CAAC;AAAA,IAAA,OAC/C;AAEI,aAAA,KAAK,OAAO,CAAC,EAAE,gBAAgB,KAAK,MAAM,CAAC;AAAA,IACtD;AAAA,EAAA,CACH;AACM,SAAA,iBAAiB,KAAK,EAAE;AACnC,GAAA,IACM;AAEN,MAAM,kBAAkB,KAAK,EAAE,CAAC,KAAK;AACrC,MAAM,WAAWC,gBAAK,KAAK,eAAe;AAE1C,QAAQ,IAAI,wBAAwB,eAAe,EAAE;AAGrD,QAAQ,IAAI,qBAAqB;AAEjC,SAAS,QAAQ,CAAe,gBAAA;AACxB,MAAA;AACA,UAAM,aAAa,GAAG,aAAa,aAAa,OAAO,EAAE;AACnD,UAAA,WAAW,YAAY,QAAQ,YAAY,EAAE,EAAE,QAAQ,QAAQ,EAAE;AACvE,UAAM,KAAK,GAAG,SAAS,IAAI,KAAK,QAAQ,WAAW,CAAC;AAChD,QAAA,CAAC,GAAG,WAAW,EAAE;AACjB,SAAG,UAAU,IAAI,EAAE,WAAW,KAAM,CAAA;AAExC,UAAM,iBAAiB,GAAG,EAAE,IAAI,aAAa,QAAQ,CAAC;AACtD,UAAM,aAAa;AAAA;AAAA,2DAEgC,mBAAmB,QAAQC,KAAA,SAAS,YAAY;AAAA,MAC/F,WAAW;AAAA,MACX,QAAQ;AAAA,QACJ,QAAQ;AAAA;AAAA,QACR,QAAQ;AAAA;AAAA,MACZ;AAAA,IAAA,CACH,EAAE,IAAI,CAAC,CAAC;AAAA;AAGN,OAAA,cAAc,gBAAgB,UAAU;AAC3C,YAAQ,IAAI,GAAG,WAAW,OAAO,cAAc,EAAE;AAAA,WAC5C,OAAO;AACZ,YAAQ,MAAM,sCAAsC,WAAW,KAAM,MAAc,OAAO;AAAA,EAC9F;AACJ,CAAC;"}